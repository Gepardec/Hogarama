kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: postgresql-persistent-hnrz6
  finalizers:
    - template.openshift.io/finalizer
spec:
  template:
    metadata:
      name: postgresql-persistent
      annotations:
        openshift.io/display-name: PostgreSQL
        openshift.io/documentation-url: 'https://docs.okd.io/latest/using_images/db_images/postgresql.html'
        samples.operator.openshift.io/version: 4.3.1
        tags: 'database,postgresql'
        description: >-
          PostgreSQL database service, with persistent storage. For more
          information about using this template, including OpenShift
          considerations, see https://github.com/sclorg/postgresql-container/.


          NOTE: Scaling to more than one replica is not supported. You must have
          persistent volumes available in your cluster to use this template.
        openshift.io/long-description: >-
          This template provides a standalone PostgreSQL server with a database
          created.  The database is stored on persistent storage.  The database
          name, username, and password are chosen via parameters when
          provisioning this service.
        openshift.io/support-url: 'https://access.redhat.com'
        iconClass: icon-postgresql
        openshift.io/provider-display-name: 'Red Hat, Inc.'
    message: >-
      The following service(s) have been created in your project:
      ${DATABASE_SERVICE_NAME}.

             Username: ${POSTGRESQL_USER}
             Password: ${POSTGRESQL_PASSWORD}
        Database Name: ${POSTGRESQL_DATABASE}
       Connection URL: postgresql://${DATABASE_SERVICE_NAME}:5432/

      For more information about using this template, including OpenShift
      considerations, see https://github.com/sclorg/postgresql-container/.
    objects:
      - apiVersion: v1
        kind: Secret
        metadata:
          annotations:
            template.openshift.io/expose-database_name: '{.data[''database-name'']}'
            template.openshift.io/expose-password: '{.data[''database-password'']}'
            template.openshift.io/expose-username: '{.data[''database-user'']}'
          name: '${DATABASE_SERVICE_NAME}'
        stringData:
          database-name: '${POSTGRESQL_DATABASE}'
          database-password: '${POSTGRESQL_PASSWORD}'
          database-user: '${POSTGRESQL_USER}'
      - apiVersion: v1
        kind: Service
        metadata:
          annotations:
            template.openshift.io/expose-uri: >-
              postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
          name: '${DATABASE_SERVICE_NAME}'
        spec:
          ports:
            - name: postgresql
              nodePort: 0
              port: 5432
              protocol: TCP
              targetPort: 5432
          selector:
            name: '${DATABASE_SERVICE_NAME}'
          sessionAffinity: None
          type: ClusterIP
        status:
          loadBalancer: {}
      - apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: '${DATABASE_SERVICE_NAME}'
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: '${VOLUME_CAPACITY}'
      - apiVersion: v1
        kind: DeploymentConfig
        metadata:
          annotations:
            template.alpha.openshift.io/wait-for-ready: 'true'
          name: '${DATABASE_SERVICE_NAME}'
        spec:
          replicas: 1
          selector:
            name: '${DATABASE_SERVICE_NAME}'
          strategy:
            type: Recreate
          template:
            metadata:
              labels:
                name: '${DATABASE_SERVICE_NAME}'
            spec:
              containers:
                - resources:
                    limits:
                      memory: '${MEMORY_LIMIT}'
                  readinessProbe:
                    exec:
                      command:
                        - /usr/libexec/check-container
                    initialDelaySeconds: 5
                    timeoutSeconds: 1
                  terminationMessagePath: /dev/termination-log
                  name: postgresql
                  livenessProbe:
                    exec:
                      command:
                        - /usr/libexec/check-container
                        - '--live'
                    initialDelaySeconds: 120
                    timeoutSeconds: 10
                  env:
                    - name: POSTGRESQL_USER
                      valueFrom:
                        secretKeyRef:
                          key: database-user
                          name: '${DATABASE_SERVICE_NAME}'
                    - name: POSTGRESQL_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          key: database-password
                          name: '${DATABASE_SERVICE_NAME}'
                    - name: POSTGRESQL_DATABASE
                      valueFrom:
                        secretKeyRef:
                          key: database-name
                          name: '${DATABASE_SERVICE_NAME}'
                  securityContext:
                    capabilities: {}
                    privileged: false
                  ports:
                    - containerPort: 5432
                      protocol: TCP
                  imagePullPolicy: IfNotPresent
                  volumeMounts:
                    - mountPath: /var/lib/pgsql/data
                      name: '${DATABASE_SERVICE_NAME}-data'
                  capabilities: {}
                  image: ' '
              dnsPolicy: ClusterFirst
              restartPolicy: Always
              volumes:
                - name: '${DATABASE_SERVICE_NAME}-data'
                  persistentVolumeClaim:
                    claimName: '${DATABASE_SERVICE_NAME}'
          triggers:
            - imageChangeParams:
                automatic: true
                containerNames:
                  - postgresql
                from:
                  kind: ImageStreamTag
                  name: 'postgresql:${POSTGRESQL_VERSION}'
                  namespace: '${NAMESPACE}'
                lastTriggeredImage: ''
              type: ImageChange
            - type: ConfigChange
        status: {}
    parameters:
      - name: MEMORY_LIMIT
        displayName: Memory Limit
        description: Maximum amount of memory the container can use.
        value: 512Mi
        required: true
      - name: NAMESPACE
        displayName: Namespace
        description: The OpenShift Namespace where the ImageStream resides.
        value: openshift
      - name: DATABASE_SERVICE_NAME
        displayName: Database Service Name
        description: The name of the OpenShift Service exposed for the database.
        value: postgresql
        required: true
      - name: POSTGRESQL_USER
        displayName: PostgreSQL Connection Username
        description: >-
          Username for PostgreSQL user that will be used for accessing the
          database.
        required: true
      - name: POSTGRESQL_PASSWORD
        displayName: PostgreSQL Connection Password
        description: Password for the PostgreSQL connection user.
        required: true
      - name: POSTGRESQL_DATABASE
        displayName: PostgreSQL Database Name
        description: Name of the PostgreSQL database accessed.
        required: true
      - name: VOLUME_CAPACITY
        displayName: Volume Capacity
        description: 'Volume space available for data, e.g. 512Mi, 2Gi.'
        value: 1Gi
        required: true
      - name: POSTGRESQL_VERSION
        displayName: Version of PostgreSQL Image
        description: Version of PostgreSQL image to be used (10 or latest).
        value: 'latest'
        required: true
    labels:
      template: postgresql-persistent-template
