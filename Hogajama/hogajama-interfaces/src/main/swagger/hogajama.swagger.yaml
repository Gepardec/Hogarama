hogajama:
  swagger:
    yaml:
swagger: '2.0'
info:
  version: 1.0.0
  title: Hogarama
  description: A swagger-2.0 API-specification for Hogarama
  termsOfService: 'http://helloreverb.com/terms/'
  contact:
    name: Gepardec IT Services GmbH
    email: office@gepardec.com
    url: 'http://www.gepardec.com/'
  license:
    name: MIT
    url: 'http://opensource.org/licenses/MIT'
host: localhost
basePath: /hogajama-rs/rest
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /sensor:
    get:
      description: Returns all sensor-names
      operationId: getAllSensors
      produces:
        - application/json
      responses:
        '200':
          description: sensor names response
          schema:
            type: array
            items:
              type: string
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
  /sensor/allData:
    get:
      description: Returns all sensors
      operationId: 'getAllData({maxNumber})'
      parameters:
        - in: query
          name: maxNumber
          type: integer
          required: false
          description: Maximum number of sensor data entries
        - in: query
          name: sensor
          type: string
          required: false
          description: Sensorname for which data should be shown
        - in: query
          name: from
          type: string
          format: string
          required: false
          description: Start (date, time) from where data entries should be shown
        - in: query
          name: to
          type: string
          format: string
          required: false
          description: End (date, time) from where data entries should be shown
        - in: query
          name: onlyDataFromToday
          type: boolean
          format: boolean
          required: true
          description: True, we show only the data from today.
      produces:
        - application/json
      responses:
        '200':
          description: sensor data response
          schema:
            type: array
            items:
              $ref: '#/definitions/sensorData'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
  /sensor/allWateringData:
      get:
        description: Returns all Watering Data
        operationId: 'getAllWateringData({maxNumber})'
        parameters:
          - in: query
            name: maxNumber
            type: integer
            required: false
            description: Maximum number of watering data entries
          - in: query
            name: sensor
            type: string
            required: false
            description: Sensorname for which data should be shown
          - in: query
            name: from
            type: string
            format: string
            required: false
            description: Start (date, time) from where data entries should be shown
          - in: query
            name: to
            type: string
            format: string
            required: false
            description: End (date, time) from where data entries should be shown
          - in: query
            name: onlyDataFromToday
            type: boolean
            format: boolean
            required: true
            description: True, we show only the data from today.
        produces:
          - application/json
        responses:
          '200':
            description: watering data response
            schema:
              type: array
              items:
                $ref: '#/definitions/wateringData'
          default:
            description: unexpected error
            schema:
              $ref: '#/definitions/errorModel'
  /sensor/location:
    get:
      description: Return the location by sensorName
      operationId: getLocationBySensorName
      parameters:
        - in: query
          name: sensorName
          type: string
          required: true
          description: Name of the sensor
      produces:
        - text/plain
      responses:
        '200':
          description: Location of the sensor
          schema:
            type: string
  /actor:
    get:
      description: sends data to AMQ-topic to activate pump of specific Habarama-unit
      operationId: sendActorMessage
      parameters:
        - in: query
          name: location
          type: string
          required: true
          description: location of the sensor
        - in: query
          name: actorName
          type: string
          required: true
          description: Name of the actor
        - in: query
          name: duration
          type: integer
          required: true
          description: duration of actor activation
      produces:
        - text/plain
      responses:
        '200':
          description: message sent successfully
          schema:
          type: array
          items:
            type: string
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
definitions:
  sensorData:
    type: object
    required:
      - id
      - time
      - sensorName
      - type
      - value
      - location
      - version
    properties:
      id:
        type: string
      time:
        type: string
        format: date
      sensorName:
        type: string
      type:
        type: string
      value:
        type: number
        format: double
      location:
        type: string
      version:
        type: string
  wateringData:
      type: object
      required:
        - id
        - time
        - name
        - location
        - duration
        - value
      properties:
        id:
          type: string
        time:
          type: string
          format: date
        name:
          type: string
        location:
          type: string
        duration:
          type: integer
        value:
          type: number
          format: double
  errorModel:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
