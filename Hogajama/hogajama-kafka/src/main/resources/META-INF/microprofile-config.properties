mp.messaging.connector.smallrye-kafka.bootstrap.servers=${kafka.bootstrap.servers}

mp.messaging.incoming.habarama-in.connector=smallrye-kafka
mp.messaging.incoming.habarama-in.topic=habarama
mp.messaging.incoming.habarama-in.merge=true
mp.messaging.incoming.habarama-in.broadcast=true
mp.messaging.incoming.habarama-in.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.incoming.habarama-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.habarama-in.security.protocol=SSL
mp.messaging.incoming.habarama-in.ssl.truststore.password=password
mp.messaging.incoming.habarama-in.ssl.truststore.location=${jboss.server.config.dir}/kafka-truststore.jks

# Kafka sink (we write to it)
mp.messaging.incoming.sensor-events-in.connector=smallrye-kafka
mp.messaging.incoming.sensor-events-in.topic=${kafka.topic.prefix}sensor-events
mp.messaging.incoming.sensor-events-in.merge=true
mp.messaging.incoming.sensor-events-in.broadcast=true
mp.messaging.incoming.sensor-events-in.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.incoming.sensor-events-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.sensor-events-in.security.protocol=SSL
mp.messaging.incoming.sensor-events-in.ssl.truststore.password=password
mp.messaging.incoming.sensor-events-in.ssl.truststore.location=${jboss.server.config.dir}/kafka-truststore.jks

mp.messaging.outgoing.sensor-events-out.connector=smallrye-kafka
mp.messaging.outgoing.sensor-events-out.topic=${kafka.topic.prefix}sensor-events
mp.messaging.outgoing.sensor-events-out.merge=true
mp.messaging.outgoing.sensor-events-out.broadcast=true
mp.messaging.outgoing.sensor-events-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.sensor-events-out.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.outgoing.sensor-events-out.security.protocol=SSL
mp.messaging.outgoing.sensor-events-out.ssl.truststore.password=password
mp.messaging.outgoing.sensor-events-out.ssl.truststore.location=${jboss.server.config.dir}/kafka-truststore.jks

mp.messaging.incoming.transformed-sensor-events-in.connector=smallrye-kafka
mp.messaging.incoming.transformed-sensor-events-in.topic=${kafka.topic.prefix}transformed-sensor-events
mp.messaging.incoming.transformed-sensor-events-in.merge=true
mp.messaging.incoming.transformed-sensor-events-in.broadcast=true
mp.messaging.incoming.transformed-sensor-events-in.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.incoming.transformed-sensor-events-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.transformed-sensor-events-in.security.protocol=SSL
mp.messaging.incoming.transformed-sensor-events-in.ssl.truststore.password=password
mp.messaging.incoming.transformed-sensor-events-in.ssl.truststore.location=${jboss.server.config.dir}/kafka-truststore.jks

mp.messaging.outgoing.transformed-sensor-events-out.connector=smallrye-kafka
mp.messaging.outgoing.transformed-sensor-events-out.topic=${kafka.topic.prefix}transformed-sensor-events
mp.messaging.outgoing.transformed-sensor-events-out.merge=true
mp.messaging.outgoing.transformed-sensor-events-out.broadcast=true
mp.messaging.outgoing.transformed-sensor-events-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.transformed-sensor-events-out.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.outgoing.transformed-sensor-events-out.security.protocol=SSL
mp.messaging.outgoing.transformed-sensor-events-out.ssl.truststore.password=password
mp.messaging.outgoing.transformed-sensor-events-out.ssl.truststore.location=${jboss.server.config.dir}/kafka-truststore.jks
